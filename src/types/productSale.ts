// Based on your Prisma schema for ProductSale
// Ensure this aligns with what your backend functions expect and return.

// You might want to import Product if you are embedding product details.
// import { Product } from './product'; 

export interface ProductSale {
  id: string; // Assuming cuid or uuid
  productId: string;
  // product?: Product; // Optional: if you plan to populate product details on the frontend
  tenantId: string;
  // tenant?: Tenant; // Optional: if you plan to populate tenant details
  quantity: number;
  saleAmount: number; // Consider using a decimal library for financial values if precision is critical
  saleDate: string; // ISO Date string when the sale occurred
  recordedById: string; // ID of the user who recorded the sale
  // recordedBy?: User; // Optional: if you plan to populate user details
}

// For creating a new ProductSale, some fields are system-generated or passed differently.
// 'id' and 'saleDate' are typically generated by the backend/database.
// 'recordedById' is inferred from the authenticated user on the backend.
export type NewProductSaleData = {
  productId: string;
  quantity: number;
  saleAmount: number;
  // tenantId will be passed as a separate argument or inferred in the service
};

// For fetching product sales, filters might be used
export interface ProductSaleFilters {
  productId?: string;
  dateFrom?: string; // ISO Date string
  dateTo?: string;   // ISO Date string
  recordedById?: string;
}
