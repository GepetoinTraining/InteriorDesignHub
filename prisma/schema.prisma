// Prisma Schema for InteriorDesignHub Hybrid Model

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VENDEDOR
  COMPRADOR
  FINANCEIRO
  CLIENTE_FINAL
  USER 
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum PreBudgetStatus {
  DRAFT
  SUBMITTED
  APPROVED
}

enum VisitaStatus {
  PLANNED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum ProductModelType {
  CORTINA
  PERSIANA
  PAPEL_DE_PAREDE
  SERVICO
  OUTRO
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  name       String
  role       Role
  tenantId   String
  createdAt  DateTime  @default(now())

  tenant     Tenant    @relation(fields: [tenantId], references: [id])
  activities Activity[]
  assignedLeads Lead[] @relation("AssignedLeads")
  preBudgets PreBudget[] @relation("CreatedPreBudgets")

  clientProfile  ClientProfile?

  clienteMasterId String?
  clienteMaster   ClienteMaster? @relation("MasterClientAccounts", fields: [clienteMasterId], references: [id])
  assignedVisits Visita[] @relation("SalespersonVisits")
}

model ClientProfile {
  id             String    @id @default(uuid())
  userId         String    @unique // Foreign key to User table
  user           User      @relation(fields: [userId], references: [id])
  address        String?
  phoneNumber    String?   // Specific client phone, might differ from User's primary phone
  companyName    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  visits         Visita[]
}

model ClienteMaster {
  id          String    @id @default(uuid())
  name        String    // e.g., "Company Group Name"
  adminNotes  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  clients     User[]    @relation("MasterClientAccounts")
  tenantId    String    // Assuming ClienteMaster is tenant-specific
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
}

model Tenant {
  id         String     @id @default(uuid())
  name       String
  themeColor String
  logoUrl    String
  createdAt  DateTime   @default(now())

  users         User[]
  products      Product[]
  leads         Lead[]
  preBudgets    PreBudget[]
  clienteMasters ClienteMaster[]
  visitas       Visita[]
  preBudgetItems PreBudgetItem[] // Explicitly ensuring this relation exists for PreBudgetItem.tenant
  
  productSales  ProductSale[]      // ✅ Added reverse relation
  leadConversions LeadConversion[] // ✅ Added reverse relation
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String
  price       Float
  stockQty    Int
  imageUrl    String
  modelType   ProductModelType @default(OUTRO)
  preBudgetItemSchemaJson Json?     // Corrected to Json?
  tenantId    String
  createdAt   DateTime      @default(now())

  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  sales       ProductSale[]
  preBudgetItems PreBudgetItem[] // Relation to PreBudgetItem
}

model ProductSale {
  id          String   @id @default(uuid())
  productId   String
  tenantId    String
  quantity    Int
  saleAmount  Float
  saleDate    DateTime @default(now())

  product     Product  @relation(fields: [productId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model Lead {
  id             String           @id @default(uuid())
  name           String
  email          String
  phone          String
  status         LeadStatus
  assignedUserId String?
  tenantId       String
  createdAt      DateTime         @default(now())

  tenant         Tenant           @relation(fields: [tenantId], references: [id])
  assignedUser   User?            @relation("AssignedLeads", fields: [assignedUserId], references: [id])
  conversions    LeadConversion[]
  visits         Visita[]
}

model LeadConversion {
  id          String   @id @default(uuid())
  leadId      String
  tenantId    String
  convertedAt DateTime @default(now())

  lead        Lead     @relation(fields: [leadId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model PreBudget {
  id            String          @id @default(uuid())
  clientName    String
  projectScope  String
  estimatedCost Float
  createdById   String
  status        PreBudgetStatus
  tenantId      String
  createdAt     DateTime        @default(now())

  tenant        Tenant          @relation(fields: [tenantId], references: [id])
  createdBy     User            @relation("CreatedPreBudgets", fields: [createdById], references: [id])
  items         PreBudgetItem[]
}

model PreBudgetItem {
  id                   String    @id @default(uuid())
  preBudgetId          String
  preBudget            PreBudget @relation(fields: [preBudgetId], references: [id], onDelete: Cascade)

  productId            String?    // Link to an existing product from catalog
  product              Product?   @relation(fields: [productId], references: [id])
  
  customDescription    String?    // If not using a catalog product, or to override product name
  quantity             Int       @default(1)
  
  customInputsJson     Json?     // Corrected to Json?
  
  notes                String?
  unitPrice            Float?    // Price per unit, can be from Product or manually set
  totalPrice           Float?    // quantity * unitPrice, can be manually set if no calculation yet

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  tenantId             String    // For tenant isolation of items directly
  tenant               Tenant    @relation(fields: [tenantId], references: [id])
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  action    String
  metadata  Json
  timestamp DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Visita {
  id                String        @id @default(uuid())
  dateTime          DateTime
  durationMinutes   Int
  subject           String
  notes             String?
  status            VisitaStatus  @default(PLANNED)

  assignedToUserId  String
  assignedTo        User          @relation("SalespersonVisits", fields: [assignedToUserId], references: [id])

  leadId            String?
  lead              Lead?         @relation(fields: [leadId], references: [id])

  clientProfileId   String?
  clientProfile     ClientProfile? @relation(fields: [clientProfileId], references: [id])

  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id])

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}
